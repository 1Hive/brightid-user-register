{
  "address": "0x0c7b9069A632980B3A913e0CC63396E3A3B35f4c",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_addrs",
          "type": "address[]"
        },
        {
          "name": "_timestamps",
          "type": "uint256[]"
        },
        {
          "name": "_v",
          "type": "uint8[]"
        },
        {
          "name": "_r",
          "type": "bytes32[]"
        },
        {
          "name": "_s",
          "type": "bytes32[]"
        },
        {
          "name": "_registerAndCall",
          "type": "address"
        },
        {
          "name": "_functionCallData",
          "type": "bytes"
        }
      ],
      "name": "register",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "hasInitialized",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRegistrations",
      "outputs": [
        {
          "name": "uniqueUserId",
          "type": "address"
        },
        {
          "name": "registerTime",
          "type": "uint256"
        },
        {
          "name": "addressVoid",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "requiredVerifications",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_script",
          "type": "bytes"
        }
      ],
      "name": "getEVMScriptExecutor",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getRecoveryVault",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_verificationTimestampVariance",
          "type": "uint256"
        }
      ],
      "name": "setVerificationTimestampVariance",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "brightIdContext",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "UPDATE_SETTINGS_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_brightIdUser",
          "type": "address"
        }
      ],
      "name": "hasUniqueUserId",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "brightIdVerifiers",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MAX_BRIGHTID_VERIFIERS",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_registrationPeriod",
          "type": "uint256"
        }
      ],
      "name": "setRegistrationPeriod",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "registrationPeriod",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getBrightIdVerifiers",
      "outputs": [
        {
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "token",
          "type": "address"
        }
      ],
      "name": "allowRecoverability",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "appId",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getInitializationBlock",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "transferToVault",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_sender",
          "type": "address"
        },
        {
          "name": "_role",
          "type": "bytes32"
        },
        {
          "name": "_params",
          "type": "uint256[]"
        }
      ],
      "name": "canPerform",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getEVMScriptRegistry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_brightIdUser",
          "type": "address"
        }
      ],
      "name": "isVerified",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_brightIdUser",
          "type": "address"
        }
      ],
      "name": "uniqueUserId",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "kernel",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isPetrified",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_brightIdVerifiers",
          "type": "address[]"
        },
        {
          "name": "_requiredVerifications",
          "type": "uint256"
        }
      ],
      "name": "setBrightIdVerifiers",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "verificationTimestampVariance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MIN_BRIGHTID_VERIFIERS",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_brightIdContext",
          "type": "bytes32"
        },
        {
          "name": "_brightIdVerifiers",
          "type": "address[]"
        },
        {
          "name": "_requiredVerifications",
          "type": "uint256"
        },
        {
          "name": "_registrationPeriod",
          "type": "uint256"
        },
        {
          "name": "_verificationTimestampVariance",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Register",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "script",
          "type": "bytes"
        },
        {
          "indexed": false,
          "name": "input",
          "type": "bytes"
        },
        {
          "indexed": false,
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "name": "ScriptResult",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RecoverToVault",
      "type": "event"
    }
  ],
  "transactionHash": "0xe0c123e86a7f43456aa17cbc785a23110a4250b364383dc776c8e9cf5ded0b5a",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x553114cF6E727eeE015e0dc2E8C91b08C428a629",
    "contractAddress": null,
    "transactionIndex": 12,
    "gasUsed": "2606926",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xeb2c9eb776c11e88b270f7d81ba0389f65e11cbdd37a16bee68008d8ee5684c3",
    "transactionHash": "0xe0c123e86a7f43456aa17cbc785a23110a4250b364383dc776c8e9cf5ded0b5a",
    "logs": [],
    "blockNumber": 7965649,
    "cumulativeGasUsed": "6573644",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d0a80828c836f0d48158145b45939470",
  "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_timestamps\",\"type\":\"uint256[]\"},{\"name\":\"_v\",\"type\":\"uint8[]\"},{\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"name\":\"_s\",\"type\":\"bytes32[]\"},{\"name\":\"_registerAndCall\",\"type\":\"address\"},{\"name\":\"_functionCallData\",\"type\":\"bytes\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRegistrations\",\"outputs\":[{\"name\":\"uniqueUserId\",\"type\":\"address\"},{\"name\":\"registerTime\",\"type\":\"uint256\"},{\"name\":\"addressVoid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredVerifications\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_verificationTimestampVariance\",\"type\":\"uint256\"}],\"name\":\"setVerificationTimestampVariance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"brightIdContext\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UPDATE_SETTINGS_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_brightIdUser\",\"type\":\"address\"}],\"name\":\"hasUniqueUserId\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"brightIdVerifiers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_BRIGHTID_VERIFIERS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registrationPeriod\",\"type\":\"uint256\"}],\"name\":\"setRegistrationPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrationPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBrightIdVerifiers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_brightIdUser\",\"type\":\"address\"}],\"name\":\"isVerified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_brightIdUser\",\"type\":\"address\"}],\"name\":\"uniqueUserId\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_brightIdVerifiers\",\"type\":\"address[]\"},{\"name\":\"_requiredVerifications\",\"type\":\"uint256\"}],\"name\":\"setBrightIdVerifiers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"verificationTimestampVariance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_BRIGHTID_VERIFIERS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_brightIdContext\",\"type\":\"bytes32\"},{\"name\":\"_brightIdVerifiers\",\"type\":\"address[]\"},{\"name\":\"_requiredVerifications\",\"type\":\"uint256\"},{\"name\":\"_registrationPeriod\",\"type\":\"uint256\"},{\"name\":\"_verificationTimestampVariance\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowRecoverability(address)\":{\"details\":\"By default deriving from AragonApp makes it recoverable\",\"params\":{\"token\":\"Token address that would be recovered\"},\"return\":\"bool whether the app allows the recovery\"},\"canPerform(address,bytes32,uint256[])\":{\"details\":\"Check whether an action can be performed by a sender for a particular role on this app\",\"params\":{\"_params\":\"Permission params for the role\",\"_role\":\"Role on this app\",\"_sender\":\"Sender of the call\"},\"return\":\"Boolean indicating whether the sender has the permissions to perform the action.        Always returns false if the app hasn't been initialized yet.\"},\"getInitializationBlock()\":{\"return\":\"Block number in which the contract was initialized\"},\"getRecoveryVault()\":{\"details\":\"Get the recovery vault for the app\",\"return\":\"Recovery vault address for the app\"},\"hasInitialized()\":{\"return\":\"Whether the contract has been initialized by the time of the current block\"},\"hasUniqueUserId(address)\":{\"params\":{\"_brightIdUser\":\"The BrightId user's address\"}},\"initialize(bytes32,address[],uint256,uint256,uint256)\":{\"params\":{\"_brightIdContext\":\"BrightId context used for verifying users\",\"_brightIdVerifiers\":\"Addresses used to verify signed BrightId verifications\",\"_registrationPeriod\":\"Length of time after a registration before registration is required again\",\"_requiredVerifications\":\"Number of positive verifications required to register a user\",\"_verificationTimestampVariance\":\"Acceptable period of time between creating a BrightId verification      and registering it with the BrightIdRegister\"}},\"isVerified(address)\":{\"params\":{\"_brightIdUser\":\"The BrightId user's address\"}},\"register(address[],uint256[],uint8[],bytes32[],bytes32[],address,bytes)\":{\"params\":{\"_addrs\":\"The history of addresses, or contextIds, used by this user to register with BrightID for the _brightIdContext\",\"_functionCallData\":\"Function data to call on the contract address after registration\",\"_r\":\"Part of the BrightId nodes signature for each verifier verifying the users uniqueness\",\"_registerAndCall\":\"Contract to call after registration, set to 0x0 to register without forwarding data\",\"_s\":\"Part of the BrightId nodes signature for each verifier verifying the users uniqueness\",\"_timestamps\":\"The time the verification was created for each verifier by a BrightId node\",\"_v\":\"Part of the BrightId nodes signature for each verifier verifying the users uniqueness\"}},\"setBrightIdVerifiers(address[],uint256)\":{\"details\":\"Should never use address(0) as a brightIdVerifier as this will allow all verifications.\",\"params\":{\"_brightIdVerifiers\":\"Addresses used to verify signed BrightId verifications\",\"_requiredVerifications\":\"Number of positive verifications required to register a user\"}},\"setRegistrationPeriod(uint256)\":{\"params\":{\"_registrationPeriod\":\"Length of time after a registration before registration is required again\"}},\"setVerificationTimestampVariance(uint256)\":{\"params\":{\"_verificationTimestampVariance\":\"Acceptable period of time between fetching a BrightId verification      and registering it with the BrightIdRegister\"}},\"supportsInterface(bytes4)\":{\"details\":\"Query if a contract implements a certain interface\",\"params\":{\"_interfaceId\":\"The interface identifier being queried, as specified in ERC-165\"},\"return\":\"True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\"},\"transferToVault(address)\":{\"params\":{\"_token\":\"Token balance to be sent to recovery vault.\"}},\"uniqueUserId(address)\":{\"details\":\"Addresses that have been used as contextId's within this context that were not registered with the   BrightIdRegister will not have a unique user id set and this function will revert.\",\"params\":{\"_brightIdUser\":\"The BrightId user's address\"}}}},\"userdoc\":{\"methods\":{\"hasUniqueUserId(address)\":{\"notice\":\"Return whether an address has a unique id assigned/was previously verified\"},\"isVerified(address)\":{\"notice\":\"Return whether or not the BrightId user is verified\"},\"register(address[],uint256[],uint8[],bytes32[],bytes32[],address,bytes)\":{\"notice\":\"Register the sender as a unique individual with a BrightId verification and assign the first address      they registered with as their unique ID\"},\"setBrightIdVerifiers(address[],uint256)\":{\"notice\":\"Set the BrightId verifier addresses to `_brightIdVerifiers` and required number of verifiers to `_requiredVerifications`\"},\"setRegistrationPeriod(uint256)\":{\"notice\":\"Set the registration period to `_registrationPeriod`\"},\"setVerificationTimestampVariance(uint256)\":{\"notice\":\"Set the verification timestamp variance to `_verificationTimestampVariance`\"},\"transferToVault(address)\":{\"notice\":\"Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them.\"},\"uniqueUserId(address)\":{\"notice\":\"Return a users unique ID, which is the first address they registered with\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/BrightIdRegister.sol\":\"BrightIdRegister\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@aragon/os/contracts/acl/ACLSyntaxSugar.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ACLSyntaxSugar {\\n    function arr() internal pure returns (uint256[]) {\\n        return new uint256[](0);\\n    }\\n\\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c);\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c, _d);\\n    }\\n\\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\\n    }\\n\\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\\n        r = new uint256[](1);\\n        r[0] = _a;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\\n        r = new uint256[](2);\\n        r[0] = _a;\\n        r[1] = _b;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        r = new uint256[](3);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        r = new uint256[](4);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        r = new uint256[](5);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n    }\\n}\\n\\n\\ncontract ACLHelpers {\\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 30));\\n    }\\n\\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 31));\\n    }\\n\\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\\n        a = uint32(_x);\\n        b = uint32(_x >> (8 * 4));\\n        c = uint32(_x >> (8 * 8));\\n    }\\n}\\n\",\"keccak256\":\"0x672a96975fc17f66905e775645cc93249426ce9601aef597a13d1e449c7f89d0\"},\"@aragon/os/contracts/acl/IACL.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\",\"keccak256\":\"0x7e081f42891bbcc8fa9f3a67efb34ecafa8e2c075e37a01d74d221c45ddfdd10\"},\"@aragon/os/contracts/apps/AppStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IAragonApp.sol\\\";\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage is IAragonApp {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_POSITION = keccak256(\\\"aragonOS.appStorage.kernel\\\");\\n    bytes32 internal constant APP_ID_POSITION = keccak256(\\\"aragonOS.appStorage.appId\\\");\\n    */\\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\\n\\n    function kernel() public view returns (IKernel) {\\n        return IKernel(KERNEL_POSITION.getStorageAddress());\\n    }\\n\\n    function appId() public view returns (bytes32) {\\n        return APP_ID_POSITION.getStorageBytes32();\\n    }\\n\\n    function setKernel(IKernel _kernel) internal {\\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\\n    }\\n\\n    function setAppId(bytes32 _appId) internal {\\n        APP_ID_POSITION.setStorageBytes32(_appId);\\n    }\\n}\\n\",\"keccak256\":\"0x57f490644a5acb26fca0b4cb2cc7f52e64b0dbe9ca5d111f7c1b4e5250ed93ad\"},\"@aragon/os/contracts/apps/AragonApp.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\nimport \\\"../common/Autopetrified.sol\\\";\\nimport \\\"../common/ConversionHelpers.sol\\\";\\nimport \\\"../common/ReentrancyGuard.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../evmscript/EVMScriptRunner.sol\\\";\\nimport \\\"../lib/standards/ERC165.sol\\\";\\n\\n\\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\\n// that they can never be initialized.\\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\\n// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\\n// are included so that they are automatically usable by subclassing contracts\\ncontract AragonApp is ERC165, AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\\n    string private constant ERROR_AUTH_FAILED = \\\"APP_AUTH_FAILED\\\";\\n\\n    modifier auth(bytes32 _role) {\\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    modifier authP(bytes32 _role, uint256[] _params) {\\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\\n    * @param _sender Sender of the call\\n    * @param _role Role on this app\\n    * @param _params Permission params for the role\\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\\n    *         Always returns false if the app hasn't been initialized yet.\\n    */\\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\\n        if (!hasInitialized()) {\\n            return false;\\n        }\\n\\n        IKernel linkedKernel = kernel();\\n        if (address(linkedKernel) == address(0)) {\\n            return false;\\n        }\\n\\n        return linkedKernel.hasPermission(\\n            _sender,\\n            address(this),\\n            _role,\\n            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\\n        );\\n    }\\n\\n    /**\\n    * @dev Get the recovery vault for the app\\n    * @return Recovery vault address for the app\\n    */\\n    function getRecoveryVault() public view returns (address) {\\n        // Funds recovery via a vault is only available when used with a kernel\\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\\n    }\\n\\n    /**\\n    * @dev Query if a contract implements a certain interface\\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\\n    */\\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\\n        return super.supportsInterface(_interfaceId) || _interfaceId == ARAGON_APP_INTERFACE_ID;\\n    }\\n}\\n\",\"keccak256\":\"0xa6c2ed08d7df92bf791ff85ecc9e400a874acfa6a7d961fa07e9175fb77231f4\"},\"@aragon/os/contracts/apps/IAragonApp.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract IAragonApp {\\n    // Includes appId and kernel methods:\\n    bytes4 internal constant ARAGON_APP_INTERFACE_ID = bytes4(0x54053e6c);\\n\\n    function kernel() public view returns (IKernel);\\n    function appId() public view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xdf64e62d609623a151c233b5f473f385117d68172aa2bf1ac4dc5cd8c5a3fc5b\"},\"@aragon/os/contracts/common/Autopetrified.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Petrifiable.sol\\\";\\n\\n\\ncontract Autopetrified is Petrifiable {\\n    constructor() public {\\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\\n        // This renders them uninitializable (and unusable without a proxy).\\n        petrify();\\n    }\\n}\\n\",\"keccak256\":\"0x42f0422744e13674e38bfbef079af7150883aba96ddbe61c5ae50df31d42696e\"},\"@aragon/os/contracts/common/ConversionHelpers.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nlibrary ConversionHelpers {\\n    string private constant ERROR_IMPROPER_LENGTH = \\\"CONVERSION_IMPROPER_LENGTH\\\";\\n\\n    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\\n        // Force cast the uint256[] into a bytes array, by overwriting its length\\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 byteLength = _input.length * 32;\\n        assembly {\\n            output := _input\\n            mstore(output, byteLength)\\n        }\\n    }\\n\\n    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\\n        // Force cast the bytes array into a uint256[], by overwriting its length\\n        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 intsLength = _input.length / 32;\\n        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\\n\\n        assembly {\\n            output := _input\\n            mstore(output, intsLength)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9872383d458352f5c68fa5afd1fc84ab6b172cbee33359cfa57655b8eda92416\"},\"@aragon/os/contracts/common/EtherTokenConstant.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\\n// contracts where both tokens and ETH are accepted\\ncontract EtherTokenConstant {\\n    address internal constant ETH = address(0);\\n}\\n\",\"keccak256\":\"0x6b2fa091968161075154a77fa741a3484c891d73cd3cd14ede502ff56dd08dfc\"},\"@aragon/os/contracts/common/IVaultRecoverable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IVaultRecoverable {\\n    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\\n\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) external view returns (bool);\\n    function getRecoveryVault() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa8e004decf086e817a864b485473b687c2c468c82af7b5011d9908586f7cbf36\"},\"@aragon/os/contracts/common/Initializable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./TimeHelpers.sol\\\";\\nimport \\\"./UnstructuredStorage.sol\\\";\\n\\n\\ncontract Initializable is TimeHelpers {\\n    using UnstructuredStorage for bytes32;\\n\\n    // keccak256(\\\"aragonOS.initializable.initializationBlock\\\")\\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\\n\\n    string private constant ERROR_ALREADY_INITIALIZED = \\\"INIT_ALREADY_INITIALIZED\\\";\\n    string private constant ERROR_NOT_INITIALIZED = \\\"INIT_NOT_INITIALIZED\\\";\\n\\n    modifier onlyInit {\\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\\n        _;\\n    }\\n\\n    modifier isInitialized {\\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\\n        _;\\n    }\\n\\n    /**\\n    * @return Block number in which the contract was initialized\\n    */\\n    function getInitializationBlock() public view returns (uint256) {\\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n    * @return Whether the contract has been initialized by the time of the current block\\n    */\\n    function hasInitialized() public view returns (bool) {\\n        uint256 initializationBlock = getInitializationBlock();\\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization has finished.\\n    */\\n    function initialized() internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization to enable the contract\\n    *      at a future block number rather than immediately.\\n    */\\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0xc859366d3143499d1458ea55cb5374ae1ca1faf41763cad5e051dea2da373ba1\"},\"@aragon/os/contracts/common/IsContract.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract IsContract {\\n    /*\\n    * NOTE: this should NEVER be used for authentication\\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\\n    *\\n    * This is only intended to be used as a sanity check that an address is actually a contract,\\n    * RATHER THAN an address not being a contract.\\n    */\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x9dd99d770a5eed901ba749e1f02e4fae443e71e899f4909f56825dfc378da089\"},\"@aragon/os/contracts/common/Petrifiable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\n\\ncontract Petrifiable is Initializable {\\n    // Use block UINT256_MAX (which should be never) as the initializable date\\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\\n\\n    function isPetrified() public view returns (bool) {\\n        return getInitializationBlock() == PETRIFIED_BLOCK;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract to prevent being initialized.\\n    *      Useful for freezing base contracts when they're used behind proxies.\\n    */\\n    function petrify() internal onlyInit {\\n        initializedAt(PETRIFIED_BLOCK);\\n    }\\n}\\n\",\"keccak256\":\"0x797d3a58b782032f6afc51725326c0b51dceb00f3af6b85b25bd91cc10d22504\"},\"@aragon/os/contracts/common/ReentrancyGuard.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\n\\n\\ncontract ReentrancyGuard {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256(\\\"aragonOS.reentrancyGuard.mutex\\\");\\n    */\\n    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\\n\\n    string private constant ERROR_REENTRANT = \\\"REENTRANCY_REENTRANT_CALL\\\";\\n\\n    modifier nonReentrant() {\\n        // Ensure mutex is unlocked\\n        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\\n\\n        // Lock mutex before function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\\n\\n        // Perform function call\\n        _;\\n\\n        // Unlock mutex after function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\\n    }\\n}\\n\",\"keccak256\":\"0xd89653c118bbd8cace423c45daa37986c566672198a415254011c028d1831189\"},\"@aragon/os/contracts/common/SafeERC20.sol\":{\"content\":\"// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\n\\n\\nlibrary SafeERC20 {\\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\\n    // https://github.com/ethereum/solidity/issues/3544\\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\\n\\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \\\"SAFE_ERC_20_BALANCE_REVERTED\\\";\\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \\\"SAFE_ERC_20_ALLOWANCE_REVERTED\\\";\\n\\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\\n        private\\n        returns (bool)\\n    {\\n        bool ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            let success := call(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                0,                    // no value\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                // Check number of bytes returned from last function call\\n                switch returndatasize\\n\\n                // No bytes returned: assume success\\n                case 0 {\\n                    ret := 1\\n                }\\n\\n                // 32 bytes returned: check if non-zero\\n                case 0x20 {\\n                    // Only return success if returned data was true\\n                    // Already have output in ptr\\n                    ret := eq(mload(ptr), 1)\\n                }\\n\\n                // Not sure what was returned: don't mark as success\\n                default { }\\n            }\\n        }\\n        return ret;\\n    }\\n\\n    function staticInvoke(address _addr, bytes memory _calldata)\\n        private\\n        view\\n        returns (bool, uint256)\\n    {\\n        bool success;\\n        uint256 ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            success := staticcall(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                ret := mload(ptr)\\n            }\\n        }\\n        return (success, ret);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferCallData = abi.encodeWithSelector(\\n            TRANSFER_SELECTOR,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferFromCallData = abi.encodeWithSelector(\\n            _token.transferFrom.selector,\\n            _from,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferFromCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\\n        bytes memory approveCallData = abi.encodeWithSelector(\\n            _token.approve.selector,\\n            _spender,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, approveCallData);\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.balanceOf().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\\n        bytes memory balanceOfCallData = abi.encodeWithSelector(\\n            _token.balanceOf.selector,\\n            _owner\\n        );\\n\\n        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\\n        require(success, ERROR_TOKEN_BALANCE_REVERTED);\\n\\n        return tokenBalance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.allowance().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\\n        bytes memory allowanceCallData = abi.encodeWithSelector(\\n            _token.allowance.selector,\\n            _owner,\\n            _spender\\n        );\\n\\n        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return allowance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.totalSupply().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticTotalSupply(ERC20 _token) internal view returns (uint256) {\\n        bytes memory totalSupplyCallData = abi.encodeWithSelector(_token.totalSupply.selector);\\n\\n        (bool success, uint256 totalSupply) = staticInvoke(_token, totalSupplyCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return totalSupply;\\n    }\\n}\\n\",\"keccak256\":\"0xd251a1207e1faa4c41500bf927310bb739b1fbc0bf880f236f8e0a9236d6a03a\"},\"@aragon/os/contracts/common/TimeHelpers.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Uint256Helpers.sol\\\";\\n\\n\\ncontract TimeHelpers {\\n    using Uint256Helpers for uint256;\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n    * @dev Returns the current block number, converted to uint64.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber64() internal view returns (uint64) {\\n        return getBlockNumber().toUint64();\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp() internal view returns (uint256) {\\n        return block.timestamp; // solium-disable-line security/no-block-members\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp, converted to uint64.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp64() internal view returns (uint64) {\\n        return getTimestamp().toUint64();\\n    }\\n}\\n\",\"keccak256\":\"0xfaba85207f0bb4bb5d7b6685a963c39a3258641bda6e523175640c3f9aeb2045\"},\"@aragon/os/contracts/common/Uint256Helpers.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nlibrary Uint256Helpers {\\n    uint256 private constant MAX_UINT64 = uint64(-1);\\n\\n    string private constant ERROR_NUMBER_TOO_BIG = \\\"UINT64_NUMBER_TOO_BIG\\\";\\n\\n    function toUint64(uint256 a) internal pure returns (uint64) {\\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\\n        return uint64(a);\\n    }\\n}\\n\",\"keccak256\":\"0x83033025a3f4402be3b7bcc9a23ce96ae4fadc7f251da8f139d73a13a3400b0c\"},\"@aragon/os/contracts/common/UnstructuredStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n}\\n\",\"keccak256\":\"0xe497dcb85bbbf10224623247f39a4aeed7d3b230de2a811f3b69cb0e7d0a64d4\"},\"@aragon/os/contracts/common/VaultRecoverable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\nimport \\\"./EtherTokenConstant.sol\\\";\\nimport \\\"./IsContract.sol\\\";\\nimport \\\"./IVaultRecoverable.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\n\\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\\n    using SafeERC20 for ERC20;\\n\\n    string private constant ERROR_DISALLOWED = \\\"RECOVER_DISALLOWED\\\";\\n    string private constant ERROR_VAULT_NOT_CONTRACT = \\\"RECOVER_VAULT_NOT_CONTRACT\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_FAILED = \\\"RECOVER_TOKEN_TRANSFER_FAILED\\\";\\n\\n    /**\\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\\n     *         but in case it does, this function allows one to recover them.\\n     * @param _token Token balance to be sent to recovery vault.\\n     */\\n    function transferToVault(address _token) external {\\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\\n        address vault = getRecoveryVault();\\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\\n\\n        uint256 balance;\\n        if (_token == ETH) {\\n            balance = address(this).balance;\\n            vault.transfer(balance);\\n        } else {\\n            ERC20 token = ERC20(_token);\\n            balance = token.staticBalanceOf(this);\\n            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\\n        }\\n\\n        emit RecoverToVault(vault, _token, balance);\\n    }\\n\\n    /**\\n    * @dev By default deriving from AragonApp makes it recoverable\\n    * @param token Token address that would be recovered\\n    * @return bool whether the app allows the recovery\\n    */\\n    function allowRecoverability(address token) public view returns (bool) {\\n        return true;\\n    }\\n\\n    // Cast non-implemented interface to be public so we can use it internally\\n    function getRecoveryVault() public view returns (address);\\n}\\n\",\"keccak256\":\"0xea4ded621a63f988b83ac27b4a23cad0a42c3d77bcf6ca7b88681ae4ea650cf4\"},\"@aragon/os/contracts/evmscript/EVMScriptRunner.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\nimport \\\"../kernel/KernelConstants.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\n\\n\\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \\\"EVMRUN_EXECUTOR_UNAVAILABLE\\\";\\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \\\"EVMRUN_PROTECTED_STATE_MODIFIED\\\";\\n\\n    /* This is manually crafted in assembly\\n    string private constant ERROR_EXECUTOR_INVALID_RETURN = \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\";\\n    */\\n\\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\\n\\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\\n    }\\n\\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\\n        return IEVMScriptRegistry(registryAddr);\\n    }\\n\\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\\n        internal\\n        isInitialized\\n        protectState\\n        returns (bytes)\\n    {\\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\\n\\n        bytes4 sig = executor.execScript.selector;\\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\\n\\n        bytes memory output;\\n        assembly {\\n            let success := delegatecall(\\n                gas,                // forward all gas\\n                executor,           // address\\n                add(data, 0x20),    // calldata start\\n                mload(data),        // calldata length\\n                0,                  // don't write output (we'll handle this ourselves)\\n                0                   // don't write output\\n            )\\n\\n            output := mload(0x40) // free mem ptr get\\n\\n            switch success\\n            case 0 {\\n                // If the call errored, forward its full error data\\n                returndatacopy(output, 0, returndatasize)\\n                revert(output, returndatasize)\\n            }\\n            default {\\n                switch gt(returndatasize, 0x3f)\\n                case 0 {\\n                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\\n                    // revert with \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\"\\n                    // See remix: doing a `revert(\\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\")` always results in\\n                    // this memory layout\\n                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\\n                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\\n                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\\n                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\\n\\n                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\\n                }\\n                default {\\n                    // Copy result\\n                    //\\n                    // Needs to perform an ABI decode for the expected `bytes` return type of\\n                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\\n                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\\n                    //    [ output length (32 bytes) ]\\n                    //    [ output content (N bytes) ]\\n                    //\\n                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\\n                    let copysize := sub(returndatasize, 0x20)\\n                    returndatacopy(output, 0x20, copysize)\\n\\n                    mstore(0x40, add(output, copysize)) // free mem ptr set\\n                }\\n            }\\n        }\\n\\n        emit ScriptResult(address(executor), _script, _input, output);\\n\\n        return output;\\n    }\\n\\n    modifier protectState {\\n        address preKernel = address(kernel());\\n        bytes32 preAppId = appId();\\n        _; // exec\\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\\n    }\\n}\\n\",\"keccak256\":\"0xf8b4ccf7ee558224c155604a4a0b5cc35715367cda5010fb38e21d63ec5236c9\"},\"@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IEVMScriptExecutor {\\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\\n    function executorType() external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x76ad18a278e36e14147f5b58a1157de67ce95f28813f3e1eacfedaaf53dd33b9\"},\"@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\n\\n\\ncontract EVMScriptRegistryConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\\\"evmreg\\\");\\n    */\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\\n}\\n\\n\\ninterface IEVMScriptRegistry {\\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\\n    function disableScriptExecutor(uint256 executorId) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\\n}\\n\",\"keccak256\":\"0x66b255ac1537765d6e79cc0ed02df004e7bf214863773901e207baafd59dc2ce\"},\"@aragon/os/contracts/kernel/IKernel.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\ninterface IKernelEvents {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\\n}\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IKernelEvents, IVaultRecoverable {\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\\n}\\n\",\"keccak256\":\"0x96e9fd607b156a96905ec0108bb4fbcc5ad85212bb98e03600069bb5727d2daa\"},\"@aragon/os/contracts/kernel/KernelConstants.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract KernelAppIds {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\\\"kernel\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\\\"acl\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\\\"vault\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\\n}\\n\\n\\ncontract KernelNamespaceConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\\\"core\\\");\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\\\"base\\\");\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n}\\n\",\"keccak256\":\"0x817f66cfc7bfafd19a4e6b1344850c5f7b72e39a1073fe862efebe608a07c0d3\"},\"@aragon/os/contracts/lib/math/SafeMath.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\\n// Adapted to use pragma ^0.4.24 and satisfy our linter rules\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    string private constant ERROR_ADD_OVERFLOW = \\\"MATH_ADD_OVERFLOW\\\";\\n    string private constant ERROR_SUB_UNDERFLOW = \\\"MATH_SUB_UNDERFLOW\\\";\\n    string private constant ERROR_MUL_OVERFLOW = \\\"MATH_MUL_OVERFLOW\\\";\\n    string private constant ERROR_DIV_ZERO = \\\"MATH_DIV_ZERO\\\";\\n\\n    /**\\n    * @dev Multiplies two numbers, reverts on overflow.\\n    */\\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (_a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = _a * _b;\\n        require(c / _a == _b, ERROR_MUL_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\\n        uint256 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\\n        uint256 c = _a - _b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, reverts on overflow.\\n    */\\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        uint256 c = _a + _b;\\n        require(c >= _a, ERROR_ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, ERROR_DIV_ZERO);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x2e11c8dcead82c452ef452f4dbced40e20ae105fa4145d920dac6e077b31d846\"},\"@aragon/os/contracts/lib/standards/ERC165.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ERC165 {\\n    // Includes supportsInterface method:\\n    bytes4 internal constant ERC165_INTERFACE_ID = bytes4(0x01ffc9a7);\\n\\n    /**\\n    * @dev Query if a contract implements a certain interface\\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\\n    */\\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\\n        return _interfaceId == ERC165_INTERFACE_ID;\\n    }\\n}\\n\",\"keccak256\":\"0x6f67f6ece954fde87dd5e1696b4b759d18280d3e45ee54233744dee11ce1d4b5\"},\"@aragon/os/contracts/lib/token/ERC20.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 {\\n    function totalSupply() public view returns (uint256);\\n\\n    function balanceOf(address _who) public view returns (uint256);\\n\\n    function allowance(address _owner, address _spender)\\n        public view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) public returns (bool);\\n\\n    function approve(address _spender, uint256 _value)\\n        public returns (bool);\\n\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        public returns (bool);\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0xa2e319fde92f9e70912f09bf6e99bbf8b9b798961d54ffcba59d347d37bde1b7\"},\"contracts/BrightIdRegister.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath.sol\\\";\\nimport \\\"./RegisterAndCall.sol\\\";\\nimport \\\"./lib/ArrayUtils.sol\\\";\\n\\ncontract BrightIdRegister is AragonApp {\\n    using SafeMath for uint256;\\n    using ArrayUtils for address[];\\n\\n    bytes32 constant public UPDATE_SETTINGS_ROLE = keccak256(\\\"UPDATE_SETTINGS_ROLE\\\");\\n\\n    uint256 constant public MIN_BRIGHTID_VERIFIERS = 1;\\n    uint256 constant public MAX_BRIGHTID_VERIFIERS = 20;\\n\\n    string private constant ERROR_SENDER_NOT_IN_VERIFICATION = \\\"BRIGHTID_SENDER_NOT_IN_VERIFICATION\\\";\\n    string private constant ERROR_ADDRESS_VOIDED = \\\"BRIGHTID_ADDRESS_VOIDED\\\";\\n    string private constant ERROR_NO_UNIQUE_ID_ASSIGNED = \\\"BRIGHTID_NO_UNIQUE_ID_ASSIGNED\\\";\\n    string private constant ERROR_NO_VERIFIERS = \\\"BRIGHTID_NO_VERIFIERS\\\";\\n    string private constant ERROR_TOO_MANY_VERIFIERS = \\\"BRIGHTID_TOO_MANY_VERIFIERS\\\";\\n    string private constant ERROR_NOT_ENOUGH_VERIFICATIONS = \\\"BRIGHTID_NOT_ENOUGH_VERIFICATIONS\\\";\\n    string private constant ERROR_TOO_MANY_VERIFICATIONS = \\\"BRIGHTID_TOO_MANY_VERIFICATIONS\\\";\\n    string private constant ERROR_REGISTRATION_PERIOD_ZERO = \\\"BRIGHTID_REGISTRATION_PERIOD_ZERO\\\";\\n    string private constant ERROR_INCORRECT_TIMESTAMPS = \\\"BRIGHTID_INCORRECT_TIMESTAMPS\\\";\\n    string private constant ERROR_INCORRECT_SIGNATURES = \\\"BRIGHTID_INCORRECT_SIGNATURES\\\";\\n    string private constant ERROR_SIGNATURES_DIFFERENT_LENGTHS = \\\"BRIGHTID_SIGNATURES_DIFFERENT_LENGTHS\\\";\\n    string private constant ERROR_CAN_NOT_DELETE_VERIFIER = \\\"BRIGHTID_CAN_NOT_DELETE_VERIFIER\\\";\\n    string private constant ERROR_NOT_VERIFIED = \\\"BRIGHTID_NOT_VERIFIED\\\";\\n\\n    struct UserRegistration {\\n        address uniqueUserId;\\n        uint256 registerTime;\\n        bool addressVoid;\\n    }\\n\\n    bytes32 public brightIdContext;\\n    address[] public brightIdVerifiers;\\n    uint256 public requiredVerifications;\\n    uint256 public registrationPeriod;\\n    uint256 public verificationTimestampVariance;\\n\\n    mapping (address => UserRegistration) public userRegistrations;\\n\\n    event Register(address sender);\\n\\n    /**\\n    * @param _brightIdContext BrightId context used for verifying users\\n    * @param _brightIdVerifiers Addresses used to verify signed BrightId verifications\\n    * @param _requiredVerifications Number of positive verifications required to register a user\\n    * @param _registrationPeriod Length of time after a registration before registration is required again\\n    * @param _verificationTimestampVariance Acceptable period of time between creating a BrightId verification\\n    *       and registering it with the BrightIdRegister\\n    */\\n    function initialize(\\n        bytes32 _brightIdContext,\\n        address[] memory _brightIdVerifiers,\\n        uint256 _requiredVerifications,\\n        uint256 _registrationPeriod,\\n        uint256 _verificationTimestampVariance\\n    )\\n        public onlyInit\\n    {\\n        _setBrightIdVerifiers(_brightIdVerifiers, _requiredVerifications);\\n        _setRegistrationPeriod(_registrationPeriod);\\n\\n        brightIdContext = _brightIdContext;\\n        verificationTimestampVariance = _verificationTimestampVariance;\\n\\n        initialized();\\n    }\\n\\n    /**\\n    * @notice Set the BrightId verifier addresses to `_brightIdVerifiers` and required number of verifiers to `_requiredVerifications`\\n    * @dev Should never use address(0) as a brightIdVerifier as this will allow all verifications.\\n    * @param _brightIdVerifiers Addresses used to verify signed BrightId verifications\\n    * @param _requiredVerifications Number of positive verifications required to register a user\\n    */\\n    function setBrightIdVerifiers(address[] _brightIdVerifiers, uint256 _requiredVerifications) external auth(UPDATE_SETTINGS_ROLE) {\\n        _setBrightIdVerifiers(_brightIdVerifiers, _requiredVerifications);\\n    }\\n\\n    /**\\n    * @notice Set the registration period to `_registrationPeriod`\\n    * @param _registrationPeriod Length of time after a registration before registration is required again\\n    */\\n    function setRegistrationPeriod(uint256 _registrationPeriod) external auth(UPDATE_SETTINGS_ROLE) {\\n        _setRegistrationPeriod(_registrationPeriod);\\n    }\\n\\n    /**\\n    * @notice Set the verification timestamp variance to `_verificationTimestampVariance`\\n    * @param _verificationTimestampVariance Acceptable period of time between fetching a BrightId verification\\n    *       and registering it with the BrightIdRegister\\n    */\\n    function setVerificationTimestampVariance(uint256 _verificationTimestampVariance) external auth(UPDATE_SETTINGS_ROLE) {\\n        verificationTimestampVariance = _verificationTimestampVariance;\\n    }\\n\\n    function getBrightIdVerifiers() external view returns (address[]) {\\n        return brightIdVerifiers;\\n    }\\n\\n    /**\\n    * @notice Register the sender as a unique individual with a BrightId verification and assign the first address\\n    *       they registered with as their unique ID\\n    * @param _addrs The history of addresses, or contextIds, used by this user to register with BrightID for the _brightIdContext\\n    * @param _timestamps The time the verification was created for each verifier by a BrightId node\\n    * @param _v Part of the BrightId nodes signature for each verifier verifying the users uniqueness\\n    * @param _r Part of the BrightId nodes signature for each verifier verifying the users uniqueness\\n    * @param _s Part of the BrightId nodes signature for each verifier verifying the users uniqueness\\n    * @param _registerAndCall Contract to call after registration, set to 0x0 to register without forwarding data\\n    * @param _functionCallData Function data to call on the contract address after registration\\n    */\\n    function register(\\n        address[] memory _addrs,\\n        uint256[] memory _timestamps,\\n        uint8[] memory _v,\\n        bytes32[] memory _r,\\n        bytes32[] memory _s,\\n        RegisterAndCall _registerAndCall,\\n        bytes _functionCallData\\n    )\\n        public // public instead of external to mitigate stack too deep error\\n    {\\n        UserRegistration storage userRegistration = userRegistrations[msg.sender];\\n        require(msg.sender == _addrs[0], ERROR_SENDER_NOT_IN_VERIFICATION);\\n        _requireIsVerified(_addrs, _timestamps, _v, _r, _s);\\n        require(!userRegistration.addressVoid, ERROR_ADDRESS_VOIDED);\\n\\n        userRegistration.registerTime = getTimestamp();\\n\\n        address uniqueUserId = _addrs[_addrs.length - 1];  // The last address is/was the first address registered with the _brightIdContext\\n        if (userRegistration.uniqueUserId == address(0)) {\\n            userRegistration.uniqueUserId = uniqueUserId;\\n            _voidPreviousRegistrations(_addrs);\\n        }\\n\\n        // We do this to ensure calls of uniqueUserId() that use the result of uniqueUserId() will\\n        // return the uniqueUserId even if the user has not registered their initial address\\n        if (userRegistrations[uniqueUserId].uniqueUserId == address(0)) {\\n            userRegistrations[uniqueUserId].uniqueUserId = uniqueUserId;\\n        }\\n\\n        if (address(_registerAndCall) != address(0)) {\\n            _registerAndCall.receiveRegistration(msg.sender, userRegistration.uniqueUserId, _functionCallData);\\n        }\\n\\n        emit Register(msg.sender);\\n    }\\n\\n    /**\\n    * @notice Return whether or not the BrightId user is verified\\n    * @param _brightIdUser The BrightId user's address\\n    */\\n    function isVerified(address _brightIdUser) external view returns (bool) {\\n        UserRegistration storage userRegistration = userRegistrations[_brightIdUser];\\n\\n        bool hasUniqueId = userRegistration.uniqueUserId != address(0);\\n        bool userRegisteredWithinPeriod = getTimestamp() < userRegistration.registerTime.add(registrationPeriod);\\n        bool userValid = !userRegistration.addressVoid;\\n\\n        return hasUniqueId && userRegisteredWithinPeriod && userValid;\\n    }\\n\\n    /**\\n    * @notice Return whether an address has a unique id assigned/was previously verified\\n    * @param _brightIdUser The BrightId user's address\\n    */\\n    function hasUniqueUserId(address _brightIdUser) external view returns (bool) {\\n        UserRegistration storage userRegistration = userRegistrations[_brightIdUser];\\n        return userRegistration.uniqueUserId != address(0);\\n    }\\n\\n    /**\\n    * @notice Return a users unique ID, which is the first address they registered with\\n    * @dev Addresses that have been used as contextId's within this context that were not registered with the\\n    *    BrightIdRegister will not have a unique user id set and this function will revert.\\n    * @param _brightIdUser The BrightId user's address\\n    */\\n    function uniqueUserId(address _brightIdUser) external view returns (address) {\\n        UserRegistration storage userRegistration = userRegistrations[_brightIdUser];\\n        require(userRegistration.uniqueUserId != address(0), ERROR_NO_UNIQUE_ID_ASSIGNED);\\n\\n        return userRegistration.uniqueUserId;\\n    }\\n\\n    function _setBrightIdVerifiers(address[] memory _brightIdVerifiers, uint256 _requiredVerifications) internal {\\n        require(_brightIdVerifiers.length >= MIN_BRIGHTID_VERIFIERS, ERROR_NO_VERIFIERS);\\n        require(_brightIdVerifiers.length <= MAX_BRIGHTID_VERIFIERS, ERROR_TOO_MANY_VERIFIERS);\\n        require(_requiredVerifications >= MIN_BRIGHTID_VERIFIERS, ERROR_NOT_ENOUGH_VERIFICATIONS);\\n        require(_requiredVerifications <= _brightIdVerifiers.length, ERROR_TOO_MANY_VERIFICATIONS);\\n\\n        brightIdVerifiers = _brightIdVerifiers;\\n        requiredVerifications = _requiredVerifications;\\n    }\\n\\n    function _setRegistrationPeriod(uint256 _registrationPeriod) internal {\\n        require(_registrationPeriod > 0, ERROR_REGISTRATION_PERIOD_ZERO);\\n\\n        registrationPeriod = _registrationPeriod;\\n    }\\n\\n    function _requireIsVerified(\\n        address[] memory _addrs,\\n        uint256[] memory _timestamps,\\n        uint8[] memory _v,\\n        bytes32[] memory _r,\\n        bytes32[] memory _s\\n    )\\n        internal view\\n    {\\n        require(_timestamps.length >= requiredVerifications, ERROR_INCORRECT_TIMESTAMPS);\\n        require(_v.length >= requiredVerifications && _r.length >= requiredVerifications && _s.length >= requiredVerifications, ERROR_INCORRECT_SIGNATURES);\\n        require((_timestamps.length == _v.length) && (_r.length == _s.length) && (_v.length == _s.length), ERROR_SIGNATURES_DIFFERENT_LENGTHS);\\n\\n        address[] memory brightIdVerifiersCopy = brightIdVerifiers;\\n        uint256 i = 0;\\n        uint256 validVerifications = 0;\\n\\n        while (i < brightIdVerifiers.length && validVerifications < requiredVerifications) {\\n            bytes32 signedMessage = keccak256(abi.encodePacked(brightIdContext, _addrs, _timestamps[i]));\\n            address verifierAddress = ecrecover(signedMessage, _v[i], _r[i], _s[i]);\\n\\n            bool timestampWithinVariance = getTimestamp() < _timestamps[i].add(verificationTimestampVariance);\\n            if (timestampWithinVariance && brightIdVerifiersCopy.contains(verifierAddress)) {\\n                require(brightIdVerifiersCopy.deleteItem(verifierAddress), ERROR_CAN_NOT_DELETE_VERIFIER);\\n                validVerifications++;\\n            }\\n            i++;\\n        }\\n\\n        require(validVerifications == requiredVerifications, ERROR_NOT_VERIFIED);\\n    }\\n\\n    /**\\n    * @notice Void all previously used addresses to prevent users from registering multiple times using old\\n    *       BrightID verifications\\n    */\\n    function _voidPreviousRegistrations(address[] memory _addrs) internal {\\n        if (_addrs.length <= 1) {\\n            return;\\n        }\\n\\n        // Loop until we find a voided user registration, from which all\\n        // subsequent user registrations will already be voided\\n        uint256 index = 1;\\n        while (index < _addrs.length && !userRegistrations[_addrs[index]].addressVoid) {\\n            userRegistrations[_addrs[index]].addressVoid = true;\\n            index++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c4304fc589c0733db4f128832a17f6cb2c2452a7d437804141690452ae8e9fb\"},\"contracts/RegisterAndCall.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\ncontract RegisterAndCall {\\n\\n    /**\\n    * @dev This allows users to verify their BrightId account and interact with a contract in one transaction.\\n    *      Implementers of this function should check that msg.sender is the BrightIdRegister contract expected.\\n    * @param _usersSenderAddress The address from which the transaction was created\\n    * @param _usersUniqueId The unique address assigned to the registered BrightId user\\n    * @param _data Optional data that can be used to determine what operations to execute in the recipient contract\\n    */\\n    function receiveRegistration(address _usersSenderAddress, address _usersUniqueId, bytes _data) external;\\n\\n}\\n\",\"keccak256\":\"0xab20b76c2dd6ce096b0581a87df6d8d2b6ed0373b7614e4007e34c07084cba1b\"},\"contracts/lib/ArrayUtils.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nlibrary ArrayUtils {\\n\\n    address constant public UNVERIFIABLE_ADDRESS = address(-1);\\n\\n    // Note that due to operating on a memory array, the array length can not be shortened\\n    // after an element is deleted so the element is set to an unverifiable address instead\\n    function deleteItem(address[] memory self, address item) internal returns (bool) {\\n        uint256 length = self.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (self[i] == item) {\\n                uint256 newLength = self.length - 1;\\n                if (i != newLength) {\\n                    self[i] = self[newLength];\\n                }\\n\\n                self[newLength] = UNVERIFIABLE_ADDRESS;\\n\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function contains(address[] memory self, address item) internal returns (bool) {\\n        for (uint256 i = 0; i < self.length; i++) {\\n            if (self[i] == item) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x5c02f8831fbbcf889f096ecfb61316d3d37f5f32617e0801366fa8ea46953b8b\"}},\"version\":1}",
  "bytecode": "0x6080604052620000176401000000006200001d810204565b6200023b565b6200003064010000000062000125810204565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a45440000000000000000602082015290156200010c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620000d0578181015183820152602001620000b6565b50505050905090810190601f168015620000fe5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506200012360001964010000000062000154810204565b565b60006200014f6000805160206200301f833981519152640100000000620024406200023382021704565b905090565b6200016764010000000062000125810204565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a454400000000000000006020820152901562000206576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015620000d0578181015183820152602001620000b6565b50620002306000805160206200301f8339815191528264010000000062002ce86200023782021704565b50565b5490565b9055565b612dd4806200024b6000396000f30060806040526004361061017f5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146101845780630311709d146101d25780630803fac014610367578063099837b71461037c5780630e1b8db4146103e15780632914b9bd1461040857806332f0a3b51461048a5780633eeca6f51461049f5780634c251adc146104b75780634f629fbb146104cc57806351e11fd5146104e15780635573ad581461050f57806356026f0a14610527578063569227581461053c5780635939ee04146105545780637a7dcb93146105695780637e7db6e1146105ce57806380afdea8146105fc5780638b3dd749146106115780639d4941d814610626578063a1658fad14610654578063a479e508146106c8578063b9209e33146106dd578063ca6f00071461070b578063d4aae0c414610739578063de4796ed1461074e578063e6bd1c6414610763578063ea7c7bb814610787578063ecfff1f71461079c578063f77a43d6146107b1575b600080fd5b34801561019057600080fd5b506101be7fffffffff0000000000000000000000000000000000000000000000000000000060043516610818565b604080519115158252519081900360200190f35b3480156101de57600080fd5b506040805160206004803580820135838102808601850190965280855261036595369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b73ffffffffffffffffffffffffffffffffffffffff8b35169b909a9099940197509195509182019350915081908401838280828437509497506108759650505050505050565b005b34801561037357600080fd5b506101be610d0a565b34801561038857600080fd5b506103aa73ffffffffffffffffffffffffffffffffffffffff60043516610d34565b6040805173ffffffffffffffffffffffffffffffffffffffff90941684526020840192909252151582820152519081900360600190f35b3480156103ed57600080fd5b506103f6610d6f565b60408051918252519081900360200190f35b34801561041457600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610461943694929360249392840191908190840183828082843750949750610d759650505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561049657600080fd5b50610461610e81565b3480156104ab57600080fd5b50610365600435610f20565b3480156104c357600080fd5b506103f6611013565b3480156104d857600080fd5b506103f6611019565b3480156104ed57600080fd5b506101be73ffffffffffffffffffffffffffffffffffffffff6004351661104e565b34801561051b57600080fd5b50610461600435611083565b34801561053357600080fd5b506103f66110b8565b34801561054857600080fd5b506103656004356110bd565b34801561056057600080fd5b506103f66111b5565b34801561057557600080fd5b5061057e6111bb565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156105ba5781810151838201526020016105a2565b505050509050019250505060405180910390f35b3480156105da57600080fd5b506101be73ffffffffffffffffffffffffffffffffffffffff6004351661122a565b34801561060857600080fd5b506103f6611230565b34801561061d57600080fd5b506103f6611260565b34801561063257600080fd5b5061036573ffffffffffffffffffffffffffffffffffffffff6004351661128b565b34801561066057600080fd5b5060408051602060046044358181013583810280860185019096528085526101be95833573ffffffffffffffffffffffffffffffffffffffff169560248035963696956064959394920192918291850190849080828437509497506115ad9650505050505050565b3480156106d457600080fd5b5061046161173d565b3480156106e957600080fd5b506101be73ffffffffffffffffffffffffffffffffffffffff600435166117ff565b34801561071757600080fd5b5061046173ffffffffffffffffffffffffffffffffffffffff60043516611882565b34801561074557600080fd5b5061046161196c565b34801561075a57600080fd5b506101be611997565b34801561076f57600080fd5b506103656024600480358281019291013590356119c8565b34801561079357600080fd5b506103f6611af1565b3480156107a857600080fd5b506103f6611af7565b3480156107bd57600080fd5b506040805160206004602480358281013584810280870186019097528086526103659684359636966044959194909101929182918501908490808284375094975050843595505050602083013592604001359150611afc9050565b600061082382611bcd565b8061086f57507fffffffff0000000000000000000000000000000000000000000000000000000082167f54053e6c00000000000000000000000000000000000000000000000000000000145b92915050565b336000908152600560205260408120885190919089908290811061089557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614606060405190810160405280602381526020017f42524947485449445f53454e4445525f4e4f545f494e5f56455249464943415481526020017f494f4e00000000000000000000000000000000000000000000000000000000008152509015156109cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561099457818101518382015260200161097c565b50505050905090810190601f1680156109c15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506109dd8989898989611c17565b600282015460408051808201909152601781527f42524947485449445f414444524553535f564f4944454400000000000000000060208201529060ff1615610a81576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b50610a8a612280565b6001830155885189907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101908110610abf57fe5b60209081029091010151825490915073ffffffffffffffffffffffffffffffffffffffff161515610b315781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8216178255610b3189612284565b73ffffffffffffffffffffffffffffffffffffffff818116600090815260056020526040902054161515610bae5773ffffffffffffffffffffffffffffffffffffffff8116600081815260056020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690911790555b73ffffffffffffffffffffffffffffffffffffffff841615610ccc5781546040517f870e73c2000000000000000000000000000000000000000000000000000000008152336004820181815273ffffffffffffffffffffffffffffffffffffffff93841660248401819052606060448501908152885160648601528851958a169563870e73c29592938a93909291608490910190602085019080838360005b83811015610c65578181015183820152602001610c4d565b50505050905090810190601f168015610c925780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610cb357600080fd5b505af1158015610cc7573d6000803e3d6000fd5b505050505b6040805133815290517feeda149c76076b34d4b9d8896c2f7efc0d33d1c7b53ea3c5db490d64613f603a9181900360200190a1505050505050505050565b600080610d15611260565b90508015801590610d2d575080610d2a612370565b10155b91505b5090565b60056020526000908152604090208054600182015460029092015473ffffffffffffffffffffffffffffffffffffffff909116919060ff1683565b60025481565b6000610d7f61173d565b73ffffffffffffffffffffffffffffffffffffffff166304bf2a7f836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610e03578181015183820152602001610deb565b50505050905090810190601f168015610e305780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015610e4f57600080fd5b505af1158015610e63573d6000803e3d6000fd5b505050506040513d6020811015610e7957600080fd5b505192915050565b6000610e8b61196c565b73ffffffffffffffffffffffffffffffffffffffff166332f0a3b56040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610eee57600080fd5b505af1158015610f02573d6000803e3d6000fd5b505050506040513d6020811015610f1857600080fd5b505190505b90565b604080517f5550444154455f53455454494e47535f524f4c450000000000000000000000008152815190819003601401812060008083526020830190935291610f6f9133918491905b506115ad565b60408051808201909152600f81527f4150505f415554485f4641494c45440000000000000000000000000000000000602082015290151561100c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b5050600455565b60005481565b604080517f5550444154455f53455454494e47535f524f4c450000000000000000000000008152905190819003601401902081565b73ffffffffffffffffffffffffffffffffffffffff808216600090815260056020526040902080549091161515905b50919050565b600180548290811061109157fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b601481565b604080517f5550444154455f53455454494e47535f524f4c45000000000000000000000000815281519081900360140181206000808352602083019093529161110a913391849190610f69565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156111a7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b506111b182612374565b5050565b60035481565b6060600180548060200260200160405190810160405280929190818152602001828054801561122057602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116111f5575b5050505050905090565b50600190565b600061125b7fd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b612440565b905090565b600061125b7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e612440565b60008060006112998461122a565b60408051808201909152601281527f5245434f5645525f444953414c4c4f57454400000000000000000000000000006020820152901515611336576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b5061133f610e81565b925061134a83612448565b60408051808201909152601a81527f5245434f5645525f5641554c545f4e4f545f434f4e545241435400000000000060208201529015156113e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b5073ffffffffffffffffffffffffffffffffffffffff84161515611452576040513031925073ffffffffffffffffffffffffffffffffffffffff84169083156108fc029084906000818181858888f1935050505015801561144c573d6000803e3d6000fd5b50611542565b508261147a73ffffffffffffffffffffffffffffffffffffffff82163063ffffffff61247b16565b91506114a373ffffffffffffffffffffffffffffffffffffffff8216848463ffffffff6125b816565b60408051808201909152601d81527f5245434f5645525f544f4b454e5f5452414e534645525f4641494c45440000006020820152901515611540576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b505b8373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02846040518082815260200191505060405180910390a350505050565b6000806115b8610d0a565b15156115c75760009150611735565b6115cf61196c565b905073ffffffffffffffffffffffffffffffffffffffff811615156115f75760009150611735565b8073ffffffffffffffffffffffffffffffffffffffff1663fdef910686308761161f88612650565b6040517c010000000000000000000000000000000000000000000000000000000063ffffffff871602815273ffffffffffffffffffffffffffffffffffffffff808616600483019081529085166024830152604482018490526080606483019081528351608484015283519192909160a490910190602085019080838360005b838110156116b757818101518382015260200161169f565b50505050905090810190601f1680156116e45780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561170657600080fd5b505af115801561171a573d6000803e3d6000fd5b505050506040513d602081101561173057600080fd5b505191505b509392505050565b60008061174861196c565b604080517fbe00bbd80000000000000000000000000000000000000000000000000000000081527fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb60048201527fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd616024820152905173ffffffffffffffffffffffffffffffffffffffff929092169163be00bbd8916044808201926020929091908290030181600087803b158015610e4f57600080fd5b73ffffffffffffffffffffffffffffffffffffffff80821660009081526005602052604081208054600354600183015493949293919092161515918491829161184e919063ffffffff61265a16565b611856612280565b60028601549111925060ff1615905082801561186f5750815b80156118785750805b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff808216600090815260056020908152604080832080548251808401909352601e83527f42524947485449445f4e4f5f554e495155455f49445f41535349474e45440000938301939093529293909116151561194e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b505473ffffffffffffffffffffffffffffffffffffffff1692915050565b600061125b7f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b612440565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6119c2611260565b14905090565b604080517f5550444154455f53455454494e47535f524f4c450000000000000000000000008152815190819003601401812060008083526020830190935291611a15913391849190610f69565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515611ab2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b50611aeb8484808060200260200160405190810160405280939291908181526020018383602002808284375088945061270b9350505050565b50505050565b60045481565b600181565b611b04611260565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a4544000000000000000060208201529015611ba0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b50611bab848461270b565b611bb482612374565b60008590556004819055611bc66129d2565b5050505050565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b606060008060008060006002548a5110156040805190810160405280601d81526020017f42524947485449445f494e434f52524543545f54494d455354414d5053000000815250901515611cc7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b50600254895110158015611cde5750600254885110155b8015611ced5750600254875110155b60408051808201909152601d81527f42524947485449445f494e434f52524543545f5349474e4154555245530000006020820152901515611d8a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b5088518a51148015611d9d575086518851145b8015611daa575086518951145b606060405190810160405280602581526020017f42524947485449445f5349474e4154555245535f444946464552454e545f4c4581526020017f4e47544853000000000000000000000000000000000000000000000000000000815250901515611e70576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b506001805480602002602001604051908101604052809291908181526020018280548015611ed457602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611ea9575b5050505050955060009450600093505b60015485108015611ef6575060025484105b156121d2576000548b8b87815181101515611f0d57fe5b90602001906020020151604051602001808460001916600019168152602001838051906020019060200280838360005b83811015611f55578181015183820152602001611f3d565b5050505090500182815260200193505050506040516020818303038152906040526040518082805190602001908083835b60208310611fc357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611f86565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902092506001838a8781518110151561200357fe5b906020019060200201518a8881518110151561201b57fe5b906020019060200201518a8981518110151561203357fe5b60209081029091018101516040805160008082528185018084529790975260ff9095168582015260608501939093526080840152905160a08084019492937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0830193908390039091019190865af11580156120b2573d6000803e3d6000fd5b5050506020604051035191506120e86004548b878151811015156120d257fe5b602090810290910101519063ffffffff61265a16565b6120f0612280565b10905080801561210b575061210b868363ffffffff612ab116565b156121c757612120868363ffffffff612b2416565b6040805190810160405280602081526020017f42524947485449445f43414e5f4e4f545f44454c4554455f56455249464945528152509015156121bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b506001909301925b600190940193611ee4565b60025460408051808201909152601581527f42524947485449445f4e4f545f564552494649454400000000000000000000006020820152908514612272576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b505050505050505050505050565b4290565b600060018251111515612296576111b1565b5060015b8151811080156122ef57506005600083838151811015156122b757fe5b602090810290910181015173ffffffffffffffffffffffffffffffffffffffff1682528101919091526040016000206002015460ff16155b156111b157600160056000848481518110151561230857fe5b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002060020180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001691151591909117905560010161229a565b4390565b60408051606081018252602181527f42524947485449445f524547495354524154494f4e5f504552494f445f5a455260208201527f4f00000000000000000000000000000000000000000000000000000000000000918101919091526000821161243a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b50600355565b5490565b5490565b60008073ffffffffffffffffffffffffffffffffffffffff83161515612471576000915061107d565b50506000903b1190565b6040805173ffffffffffffffffffffffffffffffffffffffff83166024808301919091528251808303909101815260449091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f70a082310000000000000000000000000000000000000000000000000000000017905260009081806125088684612c69565b60408051808201909152601c81527f534146455f4552435f32305f42414c414e43455f524556455254454400000000602082015291935091508215156125aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b508093505b50505092915050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526000906126478582612c9a565b95945050505050565b8051602002815290565b60408051808201909152601181527f4d4154485f4144445f4f564552464c4f57000000000000000000000000000000602082015260009083830190848210156126ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b508091505b5092915050565b815160408051808201909152601581527f42524947485449445f4e4f5f5645524946494552530000000000000000000000602082015290600111156127ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b50815160408051808201909152601b81527f42524947485449445f544f4f5f4d414e595f56455249464945525300000000006020820152906014101561284e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b5060408051606081018252602181527f42524947485449445f4e4f545f454e4f5547485f564552494649434154494f4e60208201527f5300000000000000000000000000000000000000000000000000000000000000918101919091526001821015612916576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b50815160408051808201909152601f81527f42524947485449445f544f4f5f4d414e595f564552494649434154494f4e53006020820152908211156129b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b5081516129cb906001906020850190612cec565b5060025550565b6129da611260565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a4544000000000000000060208201529015612a76576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b50612aaf612a82612370565b7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e9063ffffffff612ce816565b565b6000805b8351811015612b1a578273ffffffffffffffffffffffffffffffffffffffff168482815181101515612ae357fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff161415612b125760019150612704565b600101612ab5565b5060009392505050565b815160009081805b82821015612c5d578473ffffffffffffffffffffffffffffffffffffffff168683815181101515612b5957fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff161415612c52575084517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01818114612bf6578581815181101515612bb957fe5b906020019060200201518683815181101515612bd157fe5b73ffffffffffffffffffffffffffffffffffffffff9092166020928302909101909101525b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8682815181101515612c2557fe5b73ffffffffffffffffffffffffffffffffffffffff909216602092830290910190910152600193506125af565b600190910190612b2c565b50600095945050505050565b6000806000806040516020818751602089018a5afa92506000831115612c8e57805191505b50909590945092505050565b6000806040516020818551602087016000895af16000811115612cde573d8015612ccb5760208114612cd457612cdc565b60019350612cdc565b600183511493505b505b5090949350505050565b9055565b828054828255906000526020600020908101928215612d66579160200282015b82811115612d6657825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190612d0c565b50610d3092610f1d9250905b80821115610d305780547fffffffffffffffffffffffff0000000000000000000000000000000000000000168155600101612d725600a165627a7a7230582064cbb33a20167301cfbf76c40a4f690396707eca17c6090b44f6c059848a07e70029ebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e",
  "deployedBytecode": "0x60806040526004361061017f5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146101845780630311709d146101d25780630803fac014610367578063099837b71461037c5780630e1b8db4146103e15780632914b9bd1461040857806332f0a3b51461048a5780633eeca6f51461049f5780634c251adc146104b75780634f629fbb146104cc57806351e11fd5146104e15780635573ad581461050f57806356026f0a14610527578063569227581461053c5780635939ee04146105545780637a7dcb93146105695780637e7db6e1146105ce57806380afdea8146105fc5780638b3dd749146106115780639d4941d814610626578063a1658fad14610654578063a479e508146106c8578063b9209e33146106dd578063ca6f00071461070b578063d4aae0c414610739578063de4796ed1461074e578063e6bd1c6414610763578063ea7c7bb814610787578063ecfff1f71461079c578063f77a43d6146107b1575b600080fd5b34801561019057600080fd5b506101be7fffffffff0000000000000000000000000000000000000000000000000000000060043516610818565b604080519115158252519081900360200190f35b3480156101de57600080fd5b506040805160206004803580820135838102808601850190965280855261036595369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b73ffffffffffffffffffffffffffffffffffffffff8b35169b909a9099940197509195509182019350915081908401838280828437509497506108759650505050505050565b005b34801561037357600080fd5b506101be610d0a565b34801561038857600080fd5b506103aa73ffffffffffffffffffffffffffffffffffffffff60043516610d34565b6040805173ffffffffffffffffffffffffffffffffffffffff90941684526020840192909252151582820152519081900360600190f35b3480156103ed57600080fd5b506103f6610d6f565b60408051918252519081900360200190f35b34801561041457600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610461943694929360249392840191908190840183828082843750949750610d759650505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561049657600080fd5b50610461610e81565b3480156104ab57600080fd5b50610365600435610f20565b3480156104c357600080fd5b506103f6611013565b3480156104d857600080fd5b506103f6611019565b3480156104ed57600080fd5b506101be73ffffffffffffffffffffffffffffffffffffffff6004351661104e565b34801561051b57600080fd5b50610461600435611083565b34801561053357600080fd5b506103f66110b8565b34801561054857600080fd5b506103656004356110bd565b34801561056057600080fd5b506103f66111b5565b34801561057557600080fd5b5061057e6111bb565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156105ba5781810151838201526020016105a2565b505050509050019250505060405180910390f35b3480156105da57600080fd5b506101be73ffffffffffffffffffffffffffffffffffffffff6004351661122a565b34801561060857600080fd5b506103f6611230565b34801561061d57600080fd5b506103f6611260565b34801561063257600080fd5b5061036573ffffffffffffffffffffffffffffffffffffffff6004351661128b565b34801561066057600080fd5b5060408051602060046044358181013583810280860185019096528085526101be95833573ffffffffffffffffffffffffffffffffffffffff169560248035963696956064959394920192918291850190849080828437509497506115ad9650505050505050565b3480156106d457600080fd5b5061046161173d565b3480156106e957600080fd5b506101be73ffffffffffffffffffffffffffffffffffffffff600435166117ff565b34801561071757600080fd5b5061046173ffffffffffffffffffffffffffffffffffffffff60043516611882565b34801561074557600080fd5b5061046161196c565b34801561075a57600080fd5b506101be611997565b34801561076f57600080fd5b506103656024600480358281019291013590356119c8565b34801561079357600080fd5b506103f6611af1565b3480156107a857600080fd5b506103f6611af7565b3480156107bd57600080fd5b506040805160206004602480358281013584810280870186019097528086526103659684359636966044959194909101929182918501908490808284375094975050843595505050602083013592604001359150611afc9050565b600061082382611bcd565b8061086f57507fffffffff0000000000000000000000000000000000000000000000000000000082167f54053e6c00000000000000000000000000000000000000000000000000000000145b92915050565b336000908152600560205260408120885190919089908290811061089557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614606060405190810160405280602381526020017f42524947485449445f53454e4445525f4e4f545f494e5f56455249464943415481526020017f494f4e00000000000000000000000000000000000000000000000000000000008152509015156109cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561099457818101518382015260200161097c565b50505050905090810190601f1680156109c15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506109dd8989898989611c17565b600282015460408051808201909152601781527f42524947485449445f414444524553535f564f4944454400000000000000000060208201529060ff1615610a81576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b50610a8a612280565b6001830155885189907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101908110610abf57fe5b60209081029091010151825490915073ffffffffffffffffffffffffffffffffffffffff161515610b315781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8216178255610b3189612284565b73ffffffffffffffffffffffffffffffffffffffff818116600090815260056020526040902054161515610bae5773ffffffffffffffffffffffffffffffffffffffff8116600081815260056020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690911790555b73ffffffffffffffffffffffffffffffffffffffff841615610ccc5781546040517f870e73c2000000000000000000000000000000000000000000000000000000008152336004820181815273ffffffffffffffffffffffffffffffffffffffff93841660248401819052606060448501908152885160648601528851958a169563870e73c29592938a93909291608490910190602085019080838360005b83811015610c65578181015183820152602001610c4d565b50505050905090810190601f168015610c925780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610cb357600080fd5b505af1158015610cc7573d6000803e3d6000fd5b505050505b6040805133815290517feeda149c76076b34d4b9d8896c2f7efc0d33d1c7b53ea3c5db490d64613f603a9181900360200190a1505050505050505050565b600080610d15611260565b90508015801590610d2d575080610d2a612370565b10155b91505b5090565b60056020526000908152604090208054600182015460029092015473ffffffffffffffffffffffffffffffffffffffff909116919060ff1683565b60025481565b6000610d7f61173d565b73ffffffffffffffffffffffffffffffffffffffff166304bf2a7f836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610e03578181015183820152602001610deb565b50505050905090810190601f168015610e305780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015610e4f57600080fd5b505af1158015610e63573d6000803e3d6000fd5b505050506040513d6020811015610e7957600080fd5b505192915050565b6000610e8b61196c565b73ffffffffffffffffffffffffffffffffffffffff166332f0a3b56040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610eee57600080fd5b505af1158015610f02573d6000803e3d6000fd5b505050506040513d6020811015610f1857600080fd5b505190505b90565b604080517f5550444154455f53455454494e47535f524f4c450000000000000000000000008152815190819003601401812060008083526020830190935291610f6f9133918491905b506115ad565b60408051808201909152600f81527f4150505f415554485f4641494c45440000000000000000000000000000000000602082015290151561100c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b5050600455565b60005481565b604080517f5550444154455f53455454494e47535f524f4c450000000000000000000000008152905190819003601401902081565b73ffffffffffffffffffffffffffffffffffffffff808216600090815260056020526040902080549091161515905b50919050565b600180548290811061109157fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b601481565b604080517f5550444154455f53455454494e47535f524f4c45000000000000000000000000815281519081900360140181206000808352602083019093529161110a913391849190610f69565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156111a7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b506111b182612374565b5050565b60035481565b6060600180548060200260200160405190810160405280929190818152602001828054801561122057602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116111f5575b5050505050905090565b50600190565b600061125b7fd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b612440565b905090565b600061125b7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e612440565b60008060006112998461122a565b60408051808201909152601281527f5245434f5645525f444953414c4c4f57454400000000000000000000000000006020820152901515611336576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b5061133f610e81565b925061134a83612448565b60408051808201909152601a81527f5245434f5645525f5641554c545f4e4f545f434f4e545241435400000000000060208201529015156113e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b5073ffffffffffffffffffffffffffffffffffffffff84161515611452576040513031925073ffffffffffffffffffffffffffffffffffffffff84169083156108fc029084906000818181858888f1935050505015801561144c573d6000803e3d6000fd5b50611542565b508261147a73ffffffffffffffffffffffffffffffffffffffff82163063ffffffff61247b16565b91506114a373ffffffffffffffffffffffffffffffffffffffff8216848463ffffffff6125b816565b60408051808201909152601d81527f5245434f5645525f544f4b454e5f5452414e534645525f4641494c45440000006020820152901515611540576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b505b8373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02846040518082815260200191505060405180910390a350505050565b6000806115b8610d0a565b15156115c75760009150611735565b6115cf61196c565b905073ffffffffffffffffffffffffffffffffffffffff811615156115f75760009150611735565b8073ffffffffffffffffffffffffffffffffffffffff1663fdef910686308761161f88612650565b6040517c010000000000000000000000000000000000000000000000000000000063ffffffff871602815273ffffffffffffffffffffffffffffffffffffffff808616600483019081529085166024830152604482018490526080606483019081528351608484015283519192909160a490910190602085019080838360005b838110156116b757818101518382015260200161169f565b50505050905090810190601f1680156116e45780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561170657600080fd5b505af115801561171a573d6000803e3d6000fd5b505050506040513d602081101561173057600080fd5b505191505b509392505050565b60008061174861196c565b604080517fbe00bbd80000000000000000000000000000000000000000000000000000000081527fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb60048201527fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd616024820152905173ffffffffffffffffffffffffffffffffffffffff929092169163be00bbd8916044808201926020929091908290030181600087803b158015610e4f57600080fd5b73ffffffffffffffffffffffffffffffffffffffff80821660009081526005602052604081208054600354600183015493949293919092161515918491829161184e919063ffffffff61265a16565b611856612280565b60028601549111925060ff1615905082801561186f5750815b80156118785750805b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff808216600090815260056020908152604080832080548251808401909352601e83527f42524947485449445f4e4f5f554e495155455f49445f41535349474e45440000938301939093529293909116151561194e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b505473ffffffffffffffffffffffffffffffffffffffff1692915050565b600061125b7f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b612440565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6119c2611260565b14905090565b604080517f5550444154455f53455454494e47535f524f4c450000000000000000000000008152815190819003601401812060008083526020830190935291611a15913391849190610f69565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515611ab2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b50611aeb8484808060200260200160405190810160405280939291908181526020018383602002808284375088945061270b9350505050565b50505050565b60045481565b600181565b611b04611260565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a4544000000000000000060208201529015611ba0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b50611bab848461270b565b611bb482612374565b60008590556004819055611bc66129d2565b5050505050565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b606060008060008060006002548a5110156040805190810160405280601d81526020017f42524947485449445f494e434f52524543545f54494d455354414d5053000000815250901515611cc7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b50600254895110158015611cde5750600254885110155b8015611ced5750600254875110155b60408051808201909152601d81527f42524947485449445f494e434f52524543545f5349474e4154555245530000006020820152901515611d8a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b5088518a51148015611d9d575086518851145b8015611daa575086518951145b606060405190810160405280602581526020017f42524947485449445f5349474e4154555245535f444946464552454e545f4c4581526020017f4e47544853000000000000000000000000000000000000000000000000000000815250901515611e70576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b506001805480602002602001604051908101604052809291908181526020018280548015611ed457602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611ea9575b5050505050955060009450600093505b60015485108015611ef6575060025484105b156121d2576000548b8b87815181101515611f0d57fe5b90602001906020020151604051602001808460001916600019168152602001838051906020019060200280838360005b83811015611f55578181015183820152602001611f3d565b5050505090500182815260200193505050506040516020818303038152906040526040518082805190602001908083835b60208310611fc357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611f86565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902092506001838a8781518110151561200357fe5b906020019060200201518a8881518110151561201b57fe5b906020019060200201518a8981518110151561203357fe5b60209081029091018101516040805160008082528185018084529790975260ff9095168582015260608501939093526080840152905160a08084019492937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0830193908390039091019190865af11580156120b2573d6000803e3d6000fd5b5050506020604051035191506120e86004548b878151811015156120d257fe5b602090810290910101519063ffffffff61265a16565b6120f0612280565b10905080801561210b575061210b868363ffffffff612ab116565b156121c757612120868363ffffffff612b2416565b6040805190810160405280602081526020017f42524947485449445f43414e5f4e4f545f44454c4554455f56455249464945528152509015156121bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b506001909301925b600190940193611ee4565b60025460408051808201909152601581527f42524947485449445f4e4f545f564552494649454400000000000000000000006020820152908514612272576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b505050505050505050505050565b4290565b600060018251111515612296576111b1565b5060015b8151811080156122ef57506005600083838151811015156122b757fe5b602090810290910181015173ffffffffffffffffffffffffffffffffffffffff1682528101919091526040016000206002015460ff16155b156111b157600160056000848481518110151561230857fe5b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002060020180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001691151591909117905560010161229a565b4390565b60408051606081018252602181527f42524947485449445f524547495354524154494f4e5f504552494f445f5a455260208201527f4f00000000000000000000000000000000000000000000000000000000000000918101919091526000821161243a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b50600355565b5490565b5490565b60008073ffffffffffffffffffffffffffffffffffffffff83161515612471576000915061107d565b50506000903b1190565b6040805173ffffffffffffffffffffffffffffffffffffffff83166024808301919091528251808303909101815260449091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f70a082310000000000000000000000000000000000000000000000000000000017905260009081806125088684612c69565b60408051808201909152601c81527f534146455f4552435f32305f42414c414e43455f524556455254454400000000602082015291935091508215156125aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b508093505b50505092915050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526000906126478582612c9a565b95945050505050565b8051602002815290565b60408051808201909152601181527f4d4154485f4144445f4f564552464c4f57000000000000000000000000000000602082015260009083830190848210156126ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b508091505b5092915050565b815160408051808201909152601581527f42524947485449445f4e4f5f5645524946494552530000000000000000000000602082015290600111156127ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b50815160408051808201909152601b81527f42524947485449445f544f4f5f4d414e595f56455249464945525300000000006020820152906014101561284e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b5060408051606081018252602181527f42524947485449445f4e4f545f454e4f5547485f564552494649434154494f4e60208201527f5300000000000000000000000000000000000000000000000000000000000000918101919091526001821015612916576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b50815160408051808201909152601f81527f42524947485449445f544f4f5f4d414e595f564552494649434154494f4e53006020820152908211156129b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b5081516129cb906001906020850190612cec565b5060025550565b6129da611260565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a4544000000000000000060208201529015612a76576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561099457818101518382015260200161097c565b50612aaf612a82612370565b7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e9063ffffffff612ce816565b565b6000805b8351811015612b1a578273ffffffffffffffffffffffffffffffffffffffff168482815181101515612ae357fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff161415612b125760019150612704565b600101612ab5565b5060009392505050565b815160009081805b82821015612c5d578473ffffffffffffffffffffffffffffffffffffffff168683815181101515612b5957fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff161415612c52575084517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01818114612bf6578581815181101515612bb957fe5b906020019060200201518683815181101515612bd157fe5b73ffffffffffffffffffffffffffffffffffffffff9092166020928302909101909101525b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8682815181101515612c2557fe5b73ffffffffffffffffffffffffffffffffffffffff909216602092830290910190910152600193506125af565b600190910190612b2c565b50600095945050505050565b6000806000806040516020818751602089018a5afa92506000831115612c8e57805191505b50909590945092505050565b6000806040516020818551602087016000895af16000811115612cde573d8015612ccb5760208114612cd457612cdc565b60019350612cdc565b600183511493505b505b5090949350505050565b9055565b828054828255906000526020600020908101928215612d66579160200282015b82811115612d6657825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190612d0c565b50610d3092610f1d9250905b80821115610d305780547fffffffffffffffffffffffff0000000000000000000000000000000000000000168155600101612d725600a165627a7a7230582064cbb33a20167301cfbf76c40a4f690396707eca17c6090b44f6c059848a07e70029",
  "devdoc": {
    "methods": {
      "allowRecoverability(address)": {
        "details": "By default deriving from AragonApp makes it recoverable",
        "params": {
          "token": "Token address that would be recovered"
        },
        "return": "bool whether the app allows the recovery"
      },
      "canPerform(address,bytes32,uint256[])": {
        "details": "Check whether an action can be performed by a sender for a particular role on this app",
        "params": {
          "_params": "Permission params for the role",
          "_role": "Role on this app",
          "_sender": "Sender of the call"
        },
        "return": "Boolean indicating whether the sender has the permissions to perform the action.        Always returns false if the app hasn't been initialized yet."
      },
      "getInitializationBlock()": {
        "return": "Block number in which the contract was initialized"
      },
      "getRecoveryVault()": {
        "details": "Get the recovery vault for the app",
        "return": "Recovery vault address for the app"
      },
      "hasInitialized()": {
        "return": "Whether the contract has been initialized by the time of the current block"
      },
      "hasUniqueUserId(address)": {
        "params": {
          "_brightIdUser": "The BrightId user's address"
        }
      },
      "initialize(bytes32,address[],uint256,uint256,uint256)": {
        "params": {
          "_brightIdContext": "BrightId context used for verifying users",
          "_brightIdVerifiers": "Addresses used to verify signed BrightId verifications",
          "_registrationPeriod": "Length of time after a registration before registration is required again",
          "_requiredVerifications": "Number of positive verifications required to register a user",
          "_verificationTimestampVariance": "Acceptable period of time between creating a BrightId verification      and registering it with the BrightIdRegister"
        }
      },
      "isVerified(address)": {
        "params": {
          "_brightIdUser": "The BrightId user's address"
        }
      },
      "register(address[],uint256[],uint8[],bytes32[],bytes32[],address,bytes)": {
        "params": {
          "_addrs": "The history of addresses, or contextIds, used by this user to register with BrightID for the _brightIdContext",
          "_functionCallData": "Function data to call on the contract address after registration",
          "_r": "Part of the BrightId nodes signature for each verifier verifying the users uniqueness",
          "_registerAndCall": "Contract to call after registration, set to 0x0 to register without forwarding data",
          "_s": "Part of the BrightId nodes signature for each verifier verifying the users uniqueness",
          "_timestamps": "The time the verification was created for each verifier by a BrightId node",
          "_v": "Part of the BrightId nodes signature for each verifier verifying the users uniqueness"
        }
      },
      "setBrightIdVerifiers(address[],uint256)": {
        "details": "Should never use address(0) as a brightIdVerifier as this will allow all verifications.",
        "params": {
          "_brightIdVerifiers": "Addresses used to verify signed BrightId verifications",
          "_requiredVerifications": "Number of positive verifications required to register a user"
        }
      },
      "setRegistrationPeriod(uint256)": {
        "params": {
          "_registrationPeriod": "Length of time after a registration before registration is required again"
        }
      },
      "setVerificationTimestampVariance(uint256)": {
        "params": {
          "_verificationTimestampVariance": "Acceptable period of time between fetching a BrightId verification      and registering it with the BrightIdRegister"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Query if a contract implements a certain interface",
        "params": {
          "_interfaceId": "The interface identifier being queried, as specified in ERC-165"
        },
        "return": "True if the contract implements the requested interface and if its not 0xffffffff, false otherwise"
      },
      "transferToVault(address)": {
        "params": {
          "_token": "Token balance to be sent to recovery vault."
        }
      },
      "uniqueUserId(address)": {
        "details": "Addresses that have been used as contextId's within this context that were not registered with the   BrightIdRegister will not have a unique user id set and this function will revert.",
        "params": {
          "_brightIdUser": "The BrightId user's address"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "hasUniqueUserId(address)": {
        "notice": "Return whether an address has a unique id assigned/was previously verified"
      },
      "isVerified(address)": {
        "notice": "Return whether or not the BrightId user is verified"
      },
      "register(address[],uint256[],uint8[],bytes32[],bytes32[],address,bytes)": {
        "notice": "Register the sender as a unique individual with a BrightId verification and assign the first address      they registered with as their unique ID"
      },
      "setBrightIdVerifiers(address[],uint256)": {
        "notice": "Set the BrightId verifier addresses to `_brightIdVerifiers` and required number of verifiers to `_requiredVerifications`"
      },
      "setRegistrationPeriod(uint256)": {
        "notice": "Set the registration period to `_registrationPeriod`"
      },
      "setVerificationTimestampVariance(uint256)": {
        "notice": "Set the verification timestamp variance to `_verificationTimestampVariance`"
      },
      "transferToVault(address)": {
        "notice": "Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them."
      },
      "uniqueUserId(address)": {
        "notice": "Return a users unique ID, which is the first address they registered with"
      }
    }
  }
}